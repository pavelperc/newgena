// THIS DOCUMENT IS DEPRECATED. LAST DOCUMENTATION CAN BE FOUND IN JsonSettings.kt file or inside the GUI.
{
  "settingsInfo": {
    "type": "petrinet",
    "version": "0.3"
  },
  // Petrinet setup section
  "petrinetSetup" : {
    // the path to the Petri Net file. It is relative to the tool working directory. (Or it is a full path).
    "petrinetFile" : "examples\\petrinet\\complex1\\complex1.pnml",
    // the ids of arcs, which will be replaced with inhibitor arcs in the loaded petri net.
    "inhibitorArcIds" : [ "arc17" ],
    // the ids of arcs, which will be replaced with reset arcs in the loaded petri net.
    "resetArcIds" : [ "arc12", "arc13" ],
    // marking section
    "marking" : {
      // ids of initial places in marking and amounts of tokens
      "initialPlaceIds" : {
        "place1" : 2,
        "place2" : 1,
        "place5" : 1
      },
      // ids of final places in marking and amounts of tokens
      "finalPlaceIds" : {
        "place7" : 2,
        "place6" : 1
      },
      // do we use initial marking from pnml file.
      "isUsingInitialMarkingFromPnml" : false
    }
  },
  // the folder for log files output. Relative path will be computed from the tool working directory.
  "outputFolder" : "xes-out",
  
  "numberOfLogs" : 5,
  "numberOfTraces" : 10,
  // maximum number of steps in a trace.
  "maxNumberOfSteps" : 50,
  "isRemovingEmptyTraces" : true,
  // do we remove traces, who didn't reach the final marking
  "isRemovingUnfinishedTraces" : true,

  // do we use noise generation
  "isUsingNoise" : true,
  // section of noise description
  "noiseDescription" : {
    // noise level: from 1 to 100.
    "noiseLevel" : 50,
    // do we allow skipping transitions during writing to the log
    "isSkippingTransitions" : true,
    // do we add artificial events to the log
    "isUsingExternalTransitions" : true,
    // do we add existing transitions to the log as a noise.
    "isUsingInternalTransitions" : true,
    // exising transitions for the noise.
    "internalTransitionIds" : [ "transition1", "transition2" ],
    // artificial noise events
    "artificialNoiseEvents" : [ {
      // name of the event
      "activity" : "NoiseEvent",
      // execution time (is used only in time driven generation)
      "executionTimeSeconds" : 0,
      // deviation from the execution time
      "maxTimeDeviationSeconds" : 0
    }, {
      // another event example
      "activity" : "XXXXX",
      "executionTimeSeconds" : 5,
      "maxTimeDeviationSeconds" : 11
    } ]
  },
  
  // do we use generation with transition priorities
  // (Mutually exclusive with isUsingNoise and isUsingTime!!)
  "isUsingStaticPriorities" : false,

  // transition priorities description
  "staticPriorities" : {
    // max priority
    "maxPriority" : 100,
    // priority dictionary. Transitions with higher priority fire earlier.
    // the dictionary should always contain all the transitions for now.
    "transitionIdsToPriorities" : {
      "transition1" : 5,
      "transition2" : 4,
      "transition4" : 1,
      "transition5" : 2,
      "transition6" : 3
    }
  },

  // do we use generation with timestamps
  "isUsingTime" : false,
  "timeDescription" : {
    // delays of transitions in seconds. Should be specified for all transitions.
    "transitionIdsToDelays" : {
      "transition1" : {
        "delay" : 2,
        "deviation" : 1
      }
    },
    // generation start in ISO-8601 format.
    "generationStart" : "2019-04-22T01:17:48.509Z",
    
    // do we use lifecycle extension
    "isUsingLifecycle" : false,
    "isSeparatingStartAndFinish" : true,
    
    // the interval between transition firings, in seconds.
    "minimumIntervalBetweenActions" : 10,
    "maximumIntervalBetweenActions" : 20,
    
    // do we use resources
    "isUsingResources" : true,
    
    // do we use resources with groups and roles
    // for now, true just disables simplifiedResources.
    "isUsingComplexResourceSettings" : true,
    // resource synchronization: only one transition uses the resource at the same time
    "isUsingSynchronizationOnResources" : true,
    
    // all simplified resources. Contain only name.
    "simplifiedResources" : [ "simpleResource1", "simpleResource2"],
    // Complex resources with groups and roles.
    "resourceGroups" : [ {
      "name" : "group1",
      "roles" : [ {
        "name" : "role1",
        "resources" : [ {
          "name" : "resource1",
          "minDelayBetweenActionsMillis" : 100,
          "maxDelayBetweenActionsMillis" : 200
        } ]
      } ]
    } ],
    
    // matching transition ids to resources
    // Some transitions may not have any resources, in that case they can be skipped.
    // Also you can assign resources for noise events.
    // If the noise setting is disabled, they are not used.
    "transitionIdsToResources" : {
      "transition1" : {
        "simplifiedResourceNames" : [
          "simpleResource1",
          "simpleResource2"
        ],
        "complexResourceNames": [
        ],
        // you can define the whole groups of resources
        "resourceGroups": [
        ],
        // or some roles
        "resourceRoles": [
        ]
      },
      // example for a noise event
      "NoiseEvent": {
        "simplifiedResourceNames": [
        ],
        "complexResourceNames": [
        ],
        "resourceGroups": [
          "group3"
        ],
        "resourceRoles": [
        ]
      }
    },
    
    // timestamp noise
    "timeDrivenNoise" : {
      "isUsingTimestampNoise" : true,
      "isUsingLifecycleNoise" : true,
      "isUsingTimeGranularity" : true,
      "maxTimestampDeviationSeconds" : 0,
      "granularityType" : "MINUTES_5"
    }
  }
}